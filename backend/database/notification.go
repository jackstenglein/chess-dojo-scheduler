package database

import (
	"encoding/json"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/jackstenglein/chess-dojo-scheduler/backend/api/errors"
)

type NotificationType string

const (
	// Notifications generated by comments on a game
	NotificationType_GameComment NotificationType = "GAME_COMMENT"

	// Notifications generated by replies to a comment on a game
	NotificationType_GameCommentReply NotificationType = "GAME_COMMENT_REPLY"

	// Notifications generated by getting a new follower
	NotificationType_NewFollower NotificationType = "NEW_FOLLOWER"

	// Notifications generated by comments on a timeline entry
	NotificationType_TimelineComment NotificationType = "TIMELINE_COMMENT"

	// Notifications generated by emoji reactions on a timeline entry
	NotificationType_TimelineReaction NotificationType = "TIMELINE_REACTION"

	// Notifications generated by an explorer game added to the database
	NotificationType_ExplorerGame NotificationType = "EXPLORER_GAME"

	// Notifications generated by a new request to join a club
	NotificationType_NewClubJoinRequest NotificationType = "NEW_CLUB_JOIN_REQUEST"

	// Notifications generated by approval to join a club
	NotificationType_ClubJoinRequestApproved NotificationType = "CLUB_JOIN_REQUEST_APPROVED"

	// Notifications generated by a sensei game review
	NotificationType_GameReviewComplete NotificationType = "GAME_REVIEW_COMPLETE"

	// Notifications generated by an event being booked
	NotificationType_EventBooked NotificationType = "EVENT_BOOKED"

	// Notifications generated by a calendar invite
	NotificationType_CalendarInvite NotificationType = "CALENDAR_INVITE"
)

// Data for a notification
type Notification struct {
	// The username of the user that this notification applies to
	Username string `dynamodbav:"username" json:"-"`

	// The id of the notification. It can take various forms depending
	// on the type of notification.
	Id string `dynamodbav:"id" json:"id"`

	// The type of the notification
	Type NotificationType `dynamodbav:"type" json:"type"`

	// The time the notification was last updated
	UpdatedAt string `dynamodbav:"updatedAt" json:"updatedAt"`

	// The number of unread instances of this notification
	Count int `dynamodbav:"count" json:"count"`

	// Metadata for a game comment notification
	GameCommentMetadata *GameCommentMetadata `dynamodbav:"gameCommentMetadata,omitempty" json:"gameCommentMetadata,omitempty"`

	// Metadata for a game review notification
	GameReviewMetadata *GameReviewMetadata `dynamodbav:"gameReviewMetadata,omitempty" json:"gameReviewMetadata,omitempty"`

	// Metadata for a new follower notification
	NewFollowerMetadata *NewFollowerMetadata `dynamodbav:"newFollowerMetadata,omitempty" json:"newFollowerMetadata,omitempty"`

	// Metadata for a timeline comment notification
	TimelineCommentMetadata *TimelineCommentMetadata `dynamodbav:"timelineCommentMetadata,omitempty" json:"timelineCommentMetadata,omitempty"`

	// Metadata for an explorer game notification
	ExplorerGameMetadata []ExplorerGameMetadata `dynamodbav:"explorerGameMetadata,omitempty" json:"explorerGameMetadata,omitempty"`

	// Metadata for club-related notifications
	ClubMetadata *ClubMetadata `dynamodbav:"clubMetadata,omitempty" json:"clubMetadata,omitempty"`

	// Metadata for calendar invite notifications
	CalendarInviteMetadata *CalendarInviteMetadata `dynamodbav:"calendarInviteMetadata,omitempty" json:"calendarInviteMetadata,omitempty"`

	// Metadata for round robin start notifications
	RoundRobinStartMetadata *RoundRobinStartMetadata `dynamodbav:"roundRobinStartMetadata,omitempty" json:"roundRobinStartMetadata,omitempty"`
}

// Metadata for a game comment notification.
type GameCommentMetadata struct {
	// The cohort of the game
	Cohort DojoCohort `dynamodbav:"cohort" json:"cohort"`

	// The sort key of the game
	Id string `dynamodbav:"id" json:"id"`

	// The headers of the game
	Headers map[string]string `dynamodbav:"headers" json:"headers"`
}

// Metadata for a game review notification
type GameReviewMetadata struct {
	// Inherits all fields from GameCommentMetadata
	GameCommentMetadata

	// The reviewer of the game
	Reviewer Reviewer `dynamodbav:"reviewer" json:"reviewer"`
}

// Metadata for a new follower notification.
type NewFollowerMetadata struct {
	// The username of the follower
	Username string `dynamodbav:"username" json:"username"`

	// The display name of the follower
	DisplayName string `dynamodbav:"displayName" json:"displayName"`

	// The cohort of the follower
	Cohort DojoCohort `dynamodbav:"cohort" json:"cohort"`
}

// Metadata for a timeline comment notification.
type TimelineCommentMetadata struct {
	// The owner of the timeline entry
	Owner string `dynamodbav:"owner" json:"owner"`

	// The id of the timeline entry
	Id string `dynamodbav:"id" json:"id"`

	// The requirement name of the timeline entry
	Name string `dynamodbav:"name" json:"name"`
}

// Metadata for an explorer game notification.
type ExplorerGameMetadata struct {
	// The cohort of the game
	Cohort DojoCohort `dynamodbav:"cohort" json:"cohort"`

	// The sort key of the game
	Id string `dynamodbav:"id" json:"id"`

	// The owner of the game
	Owner string `dynamodbav:"owner" json:"owner"`

	// The display name of the owner of the game
	OwnerDisplayName string `dynamodbav:"ownerDisplayName" json:"ownerDisplayName"`

	// The date the game was published
	PublishedAt string `dynamodbav:"publishedAt" json:"publishedAt"`

	// The result of the explorer game, not the result of the game
	Result string `dynamodbav:"result" json:"result"`

	// The headers of the game
	Headers map[string]string `dynamodbav:"headers" json:"headers"`
}

// Metadata for a new request to join a club
type ClubMetadata struct {
	// The id of the club
	Id string `dynamodbav:"id" json:"id"`

	// The name of the club
	Name string `dynamodbav:"name" json:"name"`
}

// Metadata for calendar invite notifications
type CalendarInviteMetadata struct {
	// The id of the calendar event
	Id string `dynamodbav:"id" json:"id"`
	// The display name of the person who owns the event
	OwnerDisplayName string `dynamodbav:"ownerDisplayName" json:"ownerDisplayName"`
	// The start time of the event, in ISO 8601.
	StartTime string `dynamodbav:"startTime" json:"startTime"`
}

// Metadata for round robin start notifications
type RoundRobinStartMetadata struct {
	// The cohort of the tournament
	Cohort string `dynamodbav:"cohort" json:"cohort"`
	// The startsAt of the tournament
	StartsAt string `dynamodbav:"startsAt" json:"startsAt"`
	// The name of the tournament
	Name string `dynamodbav:"name" json:"name"`
}

func SendEventBookedNotification(event *Event) error {
	e := struct {
		Type    string `json:"type"`
		Id      string `json:"id"`
		Owner   string `json:"owner"`
		IsGroup bool   `json:"isGroup"`
	}{
		Type:    string(NotificationType_EventBooked),
		Id:      event.Id,
		Owner:   event.Owner,
		IsGroup: event.MaxParticipants != 1,
	}
	return sendSqsEvent(e)
}

func SendGameCommentEvent(game *Game, comment *PositionComment) error {
	event := struct {
		Type string `json:"type"`
		Game struct {
			Cohort string `json:"cohort"`
			Id     string `json:"id"`
		} `json:"game"`
		Comment struct {
			Fen string `json:"fen"`
			Id  string `json:"id"`
		} `json:"comment"`
	}{
		Type: string(NotificationType_GameComment),
		Game: struct {
			Cohort string "json:\"cohort\""
			Id     string "json:\"id\""
		}{
			Cohort: string(game.Cohort),
			Id:     game.Id,
		},
		Comment: struct {
			Fen string "json:\"fen\""
			Id  string "json:\"id\""
		}{
			Fen: comment.Fen,
			Id:  comment.Id,
		},
	}
	return sendSqsEvent(event)
}

func SendGameReviewCompleteEvent(game *Game) error {
	event := struct {
		Type string `json:"type"`
		Game struct {
			Cohort string `json:"cohort"`
			Id     string `json:"id"`
		} `json:"game"`
	}{
		Type: string(NotificationType_GameReviewComplete),
		Game: struct {
			Cohort string "json:\"cohort\""
			Id     string "json:\"id\""
		}{
			Cohort: string(game.Cohort),
			Id:     game.Id,
		},
	}
	return sendSqsEvent(event)
}

func SendFollowerEvent(f *FollowerEntry, cohort DojoCohort) error {
	type follower struct {
		Username    string `json:"username"`
		DisplayName string `json:"displayName"`
		Cohort      string `json:"cohort"`
	}

	event := struct {
		Type     string   `json:"type"`
		Username string   `json:"username"`
		Follower follower `json:"follower"`
	}{
		Type:     string(NotificationType_NewFollower),
		Username: f.Poster,
		Follower: follower{
			Username:    f.Follower,
			DisplayName: f.FollowerDisplayName,
			Cohort:      string(cohort),
		},
	}
	return sendSqsEvent(event)
}

func SendTimelineCommentEvent(e *TimelineEntry, c *Comment) error {
	event := struct {
		Type      string `json:"type"`
		Owner     string `json:"owner"`
		Id        string `json:"id"`
		CommentId string `json:"commentId"`
	}{
		Type:      string(NotificationType_TimelineComment),
		Owner:     e.Owner,
		Id:        e.Id,
		CommentId: c.Id,
	}
	return sendSqsEvent(event)
}

func SendTimelineReactionEvent(e *TimelineEntry) error {
	event := struct {
		Type  string `json:"type"`
		Owner string `json:"owner"`
		Id    string `json:"id"`
	}{
		Type:  string(NotificationType_TimelineReaction),
		Owner: e.Owner,
		Id:    e.Id,
	}
	return sendSqsEvent(event)
}

func SendClubJoinRequestEvent(club *Club) error {
	event := struct {
		Type  string `json:"type"`
		Id    string `json:"id"`
		Name  string `json:"name"`
		Owner string `json:"owner"`
	}{
		Type:  string(NotificationType_NewClubJoinRequest),
		Id:    club.Id,
		Name:  club.Name,
		Owner: club.Owner,
	}
	return sendSqsEvent(event)
}

func SendClubJoinRequestApprovedEvent(club *Club, username string) error {
	event := struct {
		Type     string `json:"type"`
		Id       string `json:"id"`
		Name     string `json:"name"`
		Username string `json:"username"`
	}{
		Type:     string(NotificationType_ClubJoinRequestApproved),
		Id:       club.Id,
		Name:     club.Name,
		Username: username,
	}
	return sendSqsEvent(event)
}

func SendCalendarInviteEvent(event *Event) error {
	e := struct {
		Type string `json:"type"`
		Id   string `json:"id"`
	}{
		Type: string(NotificationType_CalendarInvite),
		Id:   event.Id,
	}
	return sendSqsEvent(e)
}

func sendSqsEvent(event any) error {
	body, err := json.Marshal(event)
	if err != nil {
		return errors.Wrap(500, "Temporary server error", "Failed to marshal notification event", err)
	}
	_, err = sqsService.SendMessage(&sqs.SendMessageInput{
		MessageBody: aws.String(string(body)),
		QueueUrl:    aws.String(sqsUrl),
	})
	return errors.Wrap(500, "Temporary server error", "Failed to send SQS message", err)
}

// ListNotifications returns a list of notifications for the provided username.
func (repo *dynamoRepository) ListNotifications(username string, startKey string) ([]Notification, string, error) {
	input := &dynamodb.QueryInput{
		KeyConditionExpression: aws.String("#username = :username"),
		ExpressionAttributeNames: map[string]*string{
			"#username": aws.String("username"),
		},
		ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{
			":username": {
				S: aws.String(username),
			},
		},
		ScanIndexForward: aws.Bool(false),
		TableName:        aws.String(notificationTable),
	}

	var notifications []Notification
	lastKey, err := repo.query(input, startKey, &notifications)
	if err != nil {
		return nil, "", err
	}
	return notifications, lastKey, nil
}

// DeleteNotification removes the notification with the specified key from the database.
func (repo *dynamoRepository) DeleteNotification(username, id string) error {
	input := &dynamodb.DeleteItemInput{
		Key: map[string]*dynamodb.AttributeValue{
			"username": {S: aws.String(username)},
			"id":       {S: aws.String(id)},
		},
		TableName: aws.String(notificationTable),
	}

	_, err := repo.svc.DeleteItem(input)
	return errors.Wrap(500, "Temporary server error", "Failed Dynamo DeleteItem call", err)
}
