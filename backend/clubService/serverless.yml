# Deploys the club service.

service: chess-dojo-club
frameworkVersion: '3'

plugins:
  - serverless-plugin-custom-roles
  - serverless-go-plugin

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  region: us-east-1
  logRetentionInDays: 14
  environment:
    stage: ${sls:stage}
  httpApi:
    id: ${param:httpApiId}
  deploymentMethod: direct

custom:
  go:
    binDir: bin
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc -ldflags="-s -w"
    supportedRuntimes: ['provided.al2']
    buildProvidedRuntimeAsBootstrap: true

functions:
  save:
    handler: save/main.go
    events:
      - httpApi:
          path: /clubs
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
      - httpApi:
          path: /clubs/{id}
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: !GetAtt ClubsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:DeleteObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - ${param:PicturesBucket}
            - /clubs/*

  list:
    handler: list/main.go
    events:
      - httpApi:
          path: /public/clubs
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt ClubsTable.Arn

  get:
    handler: get/main.go
    events:
      - httpApi:
          path: /public/clubs/{id}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt ClubsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Resource: ${param:UsersTableArn}
  
  batchGet:
    handler: batchGet/main.go
    events:
      - httpApi:
          path: /public/clubs/batch
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Resource: !GetAtt ClubsTable.Arn

  join:
    handler: join/main.go
    events:
      - httpApi:
          path: /clubs/{id}/members
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
      - httpApi:
          path: /clubs/{id}/requests
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt ClubsTable.Arn
          - ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: ${param:NotificationEventQueueArn}
    environment:
      notificationEventSqsUrl: ${param:NotificationEventQueueUrl}

  processJoinRequest:
    handler: processJoinRequest/main.go
    events:
      - httpApi:
          path: /clubs/{id}/requests/{username}
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt ClubsTable.Arn
          - ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action: sqs:SendMessage
        Resource: ${param:NotificationEventQueueArn}
    environment:
      notificationEventSqsUrl: ${param:NotificationEventQueueUrl}

  leave:
    handler: leave/main.go
    events:
      - httpApi:
          path: /clubs/{id}/members
          method: delete
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt ClubsTable.Arn
          - ${param:UsersTableArn}

resources:
  Conditions:
    IsProd: !Equals ['${sls:stage}', 'prod']

  Resources:
    ClubsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${sls:stage}-clubs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
