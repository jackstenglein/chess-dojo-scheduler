# Deploys functions where PGN or FEN parsing is performed.
# These functions are separated as they require the @jackstenglein/chess
# typescript library.

service: chess-dojo-pgn

plugins:
  - serverless-plugin-custom-roles
  - serverless-esbuild

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  logRetentionInDays: 14
  environment:
    stage: ${sls:stage}
  httpApi:
    id: ${param:httpApiId}
  deploymentMethod: direct

functions:
  processGame:
    handler: explorer/processGame.handler
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: ${param:GamesTableStreamArn}
          batchWindow: 20
          batchSize: 2
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          functionResponseType: ReportBatchItemFailures
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: !GetAtt ExplorerTable.Arn

  notifyFollowers:
    handler: explorer/notifyFollowers.handler
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ExplorerTable.StreamArn
          batchWindow: 20
          batchSize: 5
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          filterPatterns:
            - eventName: [INSERT]
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt ExplorerTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: ${param:NotificationsTableArn}

  getPosition:
    handler: explorer/getPosition.handler
    events:
      - httpApi:
          path: /explorer/position
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt ExplorerTable.Arn

  listGamesByPosition:
    handler: explorer/listGames.handler
    events:
      - httpApi:
          path: /game/position
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt ExplorerTable.Arn

  followPosition:
    handler: explorer/followPosition.handler
    events:
      - httpApi:
          path: /explorer/position/follower
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: !GetAtt ExplorerTable.Arn

  createGame:
    timeout: 28
    handler: game/create.handler
    events:
      - httpApi:
          path: /game2
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource:
          - ${param:GamesTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - ${param:TimelineTableArn}

  updateGame:
    handler: game/update.handler
    events:
      - httpApi:
          path: /game2/{cohort}/{id+}
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: ${param:GamesTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - ${param:TimelineTableArn}

  recalculateExamScores:
    handler: exam/recalculateScores.handler
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: ${param:ExamsTableStreamArn}
          batchWindow: 20
          batchSize: 2
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          filterPatterns:
            - eventName: [MODIFY]
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: ${param:ExamsTableArn}

  recalculateExamRegression:
    handler: exam/regression.handler
    timeout: 120
    events:
      - stream:
          type: dynamodb
          arn: ${param:ExamsTableStreamArn}
          batchWindow: 20
          batchSize: 5
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          filterPatterns:
            - eventName: [MODIFY]
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: ${param:UsersTableArn}

resources:
  Conditions:
    IsProd: !Equals ['${sls:stage}', 'prod']

  Resources:
    ExplorerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${sls:stage}-explorer
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: normalizedFen
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: normalizedFen
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: FollowerIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: normalizedFen
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - minCohort
                - maxCohort
                - disableVariations
