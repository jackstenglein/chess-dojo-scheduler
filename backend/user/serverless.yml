# Deploys the users service.

service: chess-dojo-users
frameworkVersion: '3'

plugins:
  - serverless-plugin-custom-roles
  - serverless-go-plugin

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  region: us-east-1
  logRetentionInDays: 14
  environment:
    stage: ${sls:stage}
  httpApi:
    id: ${param:httpApiId}

custom:
  go:
    binDir: bin
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc -ldflags="-s -w"
    supportedRuntimes: ['provided.al2']
    buildProvidedRuntimeAsBootstrap: true

functions:
  linkProvider:
    handler: provider/link/main.go
    events:
      - cognitoUserPool:
          pool: ${sls:stage}-chess-dojo-scheduler-auth-pool
          trigger: PreSignUp
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminLinkProviderForUser
        Resource: ${param:UserPoolArn}
    environment:
      userPoolId: ${param:UserPoolId}

  create:
    handler: create/main.go
    timeout: 10
    environment:
      wixApiKey: ${file(../wix.yml):wixApiKey}
    events:
      - cognitoUserPool:
          pool: ${sls:stage}-chess-dojo-scheduler-auth-pool
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${param:UsersTableArn}

  checkAccess:
    handler: access/check/main.go
    events:
      - httpApi:
          path: /user/access
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}
    environment:
      wixApiKey: ${file(../wix.yml):wixApiKey}

  update:
    handler: update/main.go
    events:
      - httpApi:
          path: /user
          method: put
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:DeleteObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - ${param:PicturesBucket}
            - /profile/*
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - ${param:SecretsBucket}
            - /openClassicalServiceAccountKey.json
    environment:
      discordAuth: ${file(../discord.yml):discordAuth}
      discordFindGameChannelId: ${file(../config-${sls:stage}.yml):discordFindGameChannelId}
      discordPrivateGuildId: ${file(../config-${sls:stage}.yml):discordPrivateGuildId}
      discordPublicGuildId: ${file(../config-${sls:stage}.yml):discordPublicGuildId}

  updateProgress:
    handler: progress/update/main.go
    events:
      - httpApi:
          path: /user/progress
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${param:RequirementsTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${param:TimelineTableArn}

  updateTimeline:
    handler: progress/timeline/main.go
    events:
      - httpApi:
          path: /user/progress/timeline
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${param:RequirementsTableArn}
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: ${param:TimelineTableArn}

  get:
    handler: get/main.go
    events:
      - httpApi:
          path: /user
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
      - httpApi:
          path: /public/user/{username}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}

  listTimeline:
    handler: timeline/list/main.go
    events:
      - httpApi:
          path: /user/{owner}/timeline
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${param:TimelineTableArn}

  listByCohort:
    handler: list/main.go
    events:
      - httpApi:
          path: /user/{cohort}
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/CohortIdx'

  search:
    handler: search/main.go
    events:
      - httpApi:
          path: /public/user/search
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - ${param:UsersTableArn}
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/SearchIdx'

  updateRatings:
    handler: ratings/update/main.go
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate0-800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 0-300
                - 300-400
                - 400-500
                - 500-600
                - 600-700
                - 700-800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate800-1300
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 800-900
                - 900-1000
                - 1000-1100
                - 1100-1200
                - 1200-1300
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1300-1500
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1300-1400
                - 1400-1500
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1500-1800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1500-1600
                - 1600-1700
                - 1700-1800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1800+
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1800-1900
                - 1900-2000
                - 2000-2100
                - 2100-2200
                - 2200-2300
                - 2300-2400
                - 2400+
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/CohortIdx'

  updateStatistics:
    handler: statistics/update/main.go
    events:
      - schedule:
          rate: cron(20 0 * * ? *)
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/CohortIdx'
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: ${param:RequirementsTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: ${param:GraduationsTableArn}

  checkSubscriptions:
    handler: subscriptionCheck/main.go
    events:
      - schedule:
          rate: cron(45 23 1 * ? *)
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/CohortIdx'
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: ${param:UsersTableArn}
    environment:
      wixApiKey: ${file(../wix.yml):wixApiKey}

  updateTimeSpent:
    handler: timeline/statistics/main.go
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate0-800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 0-300
                - 300-400
                - 400-500
                - 500-600
                - 600-700
                - 700-800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate800-1100
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 800-900
                - 900-1000
                - 1000-1100
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1100-1300
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1100-1200
                - 1200-1300
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1300-1500
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1300-1400
                - 1400-1500
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1500-1800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1500-1600
                - 1600-1700
                - 1700-1800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1800+
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1800-1900
                - 1900-2000
                - 2000-2100
                - 2100-2200
                - 2200-2300
                - 2300-2400
                - 2400+
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - ${param:UsersTableArn}
                - '/index/CohortIdx'
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${param:TimelineTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: ${param:RequirementsTableArn}

  graduate:
    handler: graduate/main.go
    events:
      - httpApi:
          path: /user/graduate
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${param:RequirementsTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${param:GraduationsTableArn}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${param:TimelineTableArn}

  getStatistics:
    handler: statistics/get/main.go
    events:
      - httpApi:
          path: /public/user/statistics
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${param:UsersTableArn}

  listNotifications:
    handler: notifications/list/main.go
    events:
      - httpApi:
          path: /user/notifications
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${param:NotificationsTableArn}

  deleteNotification:
    handler: notifications/delete/main.go
    events:
      - httpApi:
          path: /user/notifications/{id}
          method: delete
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: ${param:NotificationsTableArn}

  getFollower:
    handler: followers/get/main.go
    events:
      - httpApi:
          path: /user/followers/{poster}
          method: get
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${param:FollowersTableArn}

  editFollower:
    handler: followers/edit/main.go
    events:
      - httpApi:
          path: /user/followers
          method: post
          authorizer:
            type: jwt
            id: ${param:apiAuthorizer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: ${param:FollowersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: ${param:UsersTableArn}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: ${param:NotificationsTableArn}

  listFollowers:
    handler: followers/list/main.go
    events:
      - httpApi:
          path: /public/user/{username}/followers
          method: get
      - httpApi:
          path: /public/user/{username}/following
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - ${param:FollowersTableArn}
          - Fn::Join:
              - ''
              - - ${param:FollowersTableArn}
                - '/index/FollowingIndex'

resources:
  Resources:
    UpdateRatingsTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateRatingsTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateRatings function'
        AlarmActions:
          - ${param:AlertNotificationsTopic}
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-users-${sls:stage}-updateRatings
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    UpdateStatisticsTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateStatisticsTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateStatistics function'
        AlarmActions:
          - ${param:AlertNotificationsTopic}
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-users-${sls:stage}-updateStatistics
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    UpdateTimeSpentTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateTimeSpentTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateTimeSpent function'
        AlarmActions:
          - ${param:AlertNotificationsTopic}
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-users-${sls:stage}-updateTimeSpent
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore
